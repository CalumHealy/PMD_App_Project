package com.example.aviatory

// Default imports
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import com.example.aviatory.ui.theme.AviatoryTheme

// My imports
import androidx.compose.foundation.background
import androidx.compose.ui.graphics.Color
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.ui.Alignment
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp
import androidx.compose.ui.unit.dp
import androidx.navigation.compose.rememberNavController
import androidx.navigation.NavHostController
//import androidx.compose.material.icons.Icons
//import androidx.compose.material.icons.filled.Home
//import androidx.compose.material.icons.filled.Search
//import androidx.compose.material.icons.filled.Person
//import androidx.compose.material.icons.outlined.Home
//import androidx.compose.material.icons.outlined.Search
//import androidx.compose.material.icons.outlined.Person
//import androidx.compose.material3.Badge
//import androidx.compose.material3.BadgedBox
//import androidx.compose.material3.ExperimentalMaterial3Api
//import androidx.compose.material3.NavigationBar
//import androidx.compose.material3.Icon
//import androidx.compose.material3.NavigationBarItem
//import androidx.compose.runtime.saveable.rememberSaveable
//import androidx.compose.ui.graphics.vector.ImageVector
//import androidx.navigation.NavController
//import androidx.navigation.NavHost

//data class TabBarItem(
//    val title: String,
//    val selectedIcon: ImageVector,
//    val unselectedIcon: ImageVector,
//    val badgeAmount: Int? = null
//)

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
//            val homeTab = TabBarItem(title = "Home", selectedIcon = Icons.Filled.Home, unselectedIcon = Icons.Outlined.Home)
//            val searchTab = TabBarItem(title = "Search", selectedIcon = Icons.Filled.Search, unselectedIcon = Icons.Outlined.Search)
//            val profileTab = TabBarItem(title = "Profile", selectedIcon = Icons.Filled.Person, unselectedIcon = Icons.Outlined.Person)
//
//            val tabBarItems = listOf(homeTab, searchTab, profileTab)
//
//            val navController = rememberNavController()

            AviatoryTheme {
                Scaffold { innerPadding ->
                    Box(
                        modifier = Modifier
                            .fillMaxSize()
                            .background(Color(red = 255, green = 170, blue = 220))
                            .padding(innerPadding)
                            .padding(top = 50.dp)
                    ) {
                        Column(
                            modifier = Modifier.fillMaxSize(),
                            horizontalAlignment = Alignment.CenterHorizontally
                        ) {
                            TitleText(title = "Aviatory")
                        }
                    }
                }
//                Scaffold(bottomBar = { TabView(tabBarItems, navController) }) {
//                    NavHost(navController = navController, startDestination = homeTab.title) {
//                        composable(homeTab.title) {
//                            Text(homeTab.title)
//                        }
//                        composable(alertsTab.title) {
//                            Text(alertsTab.title)
//                        }
//                        composable(settingsTab.title) {
//                            Text(settingsTab.title)
//                        }
//                        composable(moreTab.title) {
//                            MoreView()
//                        }
//                    }
//                }
            }
        }
    }
}

//@Composable
//fun TabView(tabBarItems: List<TabBarItem>, navController: NavController) {
//    var selectedTabIndex by rememberSaveable {
//        mutableStateOf(0)
//    }
//
//    NavigationBar {
//        tabBarItems.forEachIndexed { index, tabBarItem ->
//            NavigationBarItem(
//                selected = selectedTabIndex == index,
//                onClick = {
//                    selectedTabIndex = index
//                    navController.navigate(tabBarItem.title)
//                },
//                icon = {
//                    TabBarIconView(
//                        isSelected = selectedTabBarIndex == index,
//                        selectedIcon = tabBarItem.selectedIcon,
//                        unselectedIcon = tabBarItem.unselectedIcon,
//                        title = tabBarItem.title,
//                        badgeAmount = tabBarItem.badgeAmount
//                    )
//                },
//                label = {Text(tabBarItem.title)}
//            )
//        }
//    }
//}

//@OptIn(ExperimentalMaterial3Api::class)
//@Composable
//fun TabBarIconView(
//    isSelected: Boolean,
//    selectedIcon: ImageVector,
//    unselectedIcon: ImageVector,
//    title: String,
//    badgeAmount: Int? = null
//) {
//    BadgedBox(badge = { TabBarBadgeView(badgeAmount) }) {
//        Icon(
//            imageVector = if (isSelected) {selectedIcon} else {unselectedIcon},
//            contentDescription = title
//        )
//    }
//}

//@Composable
//@OptIn(ExperimentalMaterial3Api::class)
//fun TabBarBadgeView(count: Int? = null) {
//    if (count != null) {
//        Badge {
//            Text(count.toString())
//        }
//    }
//}

//@Composable
//fun MoreView() {
//    Column(
//        modifier = Modifier.fillMaxSize()
//    ) {
//        Text("Thing 1")
//        Text("Thing 2")
//        Text("Thing 3")
//        Text("Thing 4")
//        Text("Thing 5")
//    }
//}

//@Composable
//fun MainScreen() {
//    val navController = rememberNavController()
//    Scaffold(
//        bottomBar = { BottomNavigationBar(navController) }
//    ) { innerPadding ->
//        NavigationGraph(navController, Modifier.padding(innerPadding))
//    }
//}

//@Composable
//fun BottomNavigationBar(navController: NavHostController) {
//    val items = listOf(
//        BottomNavItem.Home,
//        BottomNavItem.Search,
//        BottomNavItem.Profile
//    )
//    BottomNavigation {
//        val currentRoute = navController.currentBackStackEntryAsState().value?.destination?.route
//        items.forEach { item ->
//            BottomNavigationItem(
//                selected = currentRoute == item.route,
//                onClick = { navController.navigate(item.route) },
//                icon = {
//                    Icon(imageVector = item.icon, contentDescription = item.label)
//                },
//                label = { Text(item.label) }
//            )
//        }
//    }
//}

//sealed class BottomNavItem(val route: String, val label: String, val icon: androidx.compose.ui.graphics.vector.ImageVector) {
//    object Home : BottomNavItem("home", "Home", Icons.Default.Home)
//    object Search : BottomNavItem("search", "Search", Icons.Default.Search)
//    object Profile : BottomNavItem("profile", "Profile", Icons.Default.Person)
//}

//@Composable
//fun NavigationGraph(navController: NavHostController, modifier: Modifier = Modifier) {
//    NavHost(navController = navController, startDestination = BottomNavItem.Home.route, modifier = modifier) {
//        composable(BottomNavItem.Home.route) { HomeScreen() }
//        composable(BottomNavItem.Search.route) { SearchScreen() }
//        composable(BottomNavItem.Profile.route) { ProfileScreen() }
//    }
//}

@Composable
fun HomeScreen() {
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFE3F2FD)), // Light Blue Background
        contentAlignment = Alignment.Center
    ) {
        Text(text = "Home Screen", fontSize = 24.sp, color = Color.Black)
    }
}

@Composable
fun SearchScreen() {
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFBBDEFB)), // Lighter Blue Background
        contentAlignment = Alignment.Center
    ) {
        Text(text = "Search Screen", fontSize = 24.sp, color = Color.Black)
    }
}

@Composable
fun ProfileScreen() {
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFF90CAF9)), // Different Blue Background
        contentAlignment = Alignment.Center
    ) {
        Text(text = "Profile Screen", fontSize = 24.sp, color = Color.Black)
    }
}

@Composable
fun TitleText(title: String) {
    Text(
        text = title,
        style = TextStyle(
            fontSize = 40.sp,
            fontWeight = FontWeight.Bold,
            color = Color(red = 90, green = 130, blue = 255)
        )
    )
}

@Composable
fun Greeting(name: String, modifier: Modifier = Modifier) {
    Text(
        text = "Hello $name!",
        modifier = modifier
    )
}

@Preview(showBackground = true)
@Composable
fun GreetingPreview() {
    AviatoryTheme {
        Greeting("Android")
    }
}
